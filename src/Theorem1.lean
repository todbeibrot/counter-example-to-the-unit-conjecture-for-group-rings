import data.finsupp.basic
import torsion_free

namespace Theorem1
noncomputable theory

notation `P`  := HW_group

notation `F₂` := zmod 2

local attribute [instance] nat.fact_prime_two

notation `F₂P` := monoid_algebra F₂ P

lemma zmod2_2_eq_0 : (2 : F₂) = 0 := by dec_trivial

lemma cancel_add_same {x : P} :
finsupp.single x (1 : F₂) + finsupp.single x (1 : F₂) = 0 :=
begin
  ext,
  simp,
  rw ← two_mul,
  rw zmod2_2_eq_0,
  rw zero_mul,
  simp,
end

lemma two_smul_cancel {x : P} : 
2 • finsupp.single x (1 : F₂) = 0 :=
begin
  rw two_smul,
  exact cancel_add_same
end

@[simp] lemma neg_finsupp_eq_finsupp (x : ↥P) :
-finsupp.single x (1 : F₂) = finsupp.single x 1 :=
begin
  ext,
  by_cases x = a;
  simp [h]
end

lemma neg_one_def : -(1 : F₂P) = 1 :=
begin
  rw monoid_algebra.one_def,
  rw neg_finsupp_eq_finsupp,
end

lemma eq_iff_neg_add_eq_zero {G : Type} [add_group G] (a b : G) :
a = b ↔ -b + a = 0 := 
begin
  split,
  { intro h,
    simp[h] },
  { intro h,
    rw ← add_zero b,
    rw ← h,
    simp }
end

lemma finsupp.sum_singleton {x : P} : 
[finsupp.single x (1 : F₂)].sum = finsupp.single x (1 : F₂) :=
list.sum_singleton

notation `G` := list ℚ

--we are using f to get a smaller description of our group elements in order to save computation
def pre_f : P → G := λ g, [g 3 0, g 3 1, g 3 2]

namespace pre_f

open torsion_free
open_locale classical

def gdiag : ℚ → ℚ :=
begin
  intro q,
  by_cases ∃ z : ℤ, q = ↑z,
  exact 1,
  exact -1
end

def try : G → GL (fin 4) ℚ
| [g1, g2, g3] :=
  { val := ![![gdiag g2, 0, 0, 0], 
  ![0, gdiag g1, 0, 0], 
  ![0, 0, gdiag g2 * gdiag g1, 0], 
  ![g1, g2, g3, 1]],
  inv := ![![gdiag g2, 0, 0, 0], 
  ![0, gdiag g1, 0, 0],
  ![0, 0, gdiag g2 * gdiag g1, 0], 
  ![-gdiag g2 * g1, -gdiag g1 * g2, -gdiag g2 * gdiag g1 * g3, 1]],
  val_inv := 
  begin
    by_cases h1 : ∃ z : ℤ, g1 = ↑z,
    by_cases h2 : ∃ z : ℤ, g2 = ↑z,
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
    by_cases h2 : ∃ z : ℤ, g2 = ↑z,
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
  end,
  inv_val :=
  begin
    by_cases h1 : ∃ z : ℤ, g1 = ↑z,
    by_cases h2 : ∃ z : ℤ, g2 = ↑z,
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
    by_cases h2 : ∃ z : ℤ, g2 = ↑z,
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
    norm_num [HW_matrix.one_def, gdiag, h1, h2],
  end }
| _ := 1

def inv : G → P
| [g1, g2, g3] :=
  begin
    by_cases h : try [g1, g2, g3] ∈ P,
    exact ⟨try [g1, g2, g3], h⟩,
    exact 1
  end
| _ := 1

lemma try_pre_f_eq_id (g : P) :
try (pre_f g) = g :=
begin
  have h : ↑g ∈ P,
  { obtain ⟨a,b⟩ := g,
    exact b },
  have h30 : g 3 0 = (g : GL (fin 4) ℚ) 3 0 := by exact @HW_group.HW_apply g 3 0 h,
  have h31 : g 3 1 = (g : GL (fin 4) ℚ) 3 1 := by exact @HW_group.HW_apply g 3 1 h,
  have h32 : g 3 2 = (g : GL (fin 4) ℚ) 3 2 := by exact @HW_group.HW_apply g 3 2 h,
  conv_rhs {rw ← HW_group_has_formX'},
  unfold formX HW_element,
  simp only [HW_group_00' h, HW_group_11' h, HW_group_22' h, pm.pm_one_sign'_mul],
  simp [try, pre_f],
  by_cases h0 : (∃ z : ℤ, g 3 0 = ↑z);
  by_cases h1 : (∃ z : ℤ, g 3 1 = ↑z);
  by_cases h2 : (∃ z : ℤ, g 3 2 = ↑z);
  simp [if_pos h0, if_pos h1, if_pos h2, gdiag];
  try {simp [if_neg h0]};
  try {simp [if_neg h1]};
  try {simp [if_neg h2]};
  simp only [h30, h31, h32, HW_group_30' h, HW_group_31' h, HW_group_00''' h, HW_group_11''' h] at h0 h1;
  simp only [matrix.general_linear_group.coe_fn_eq_coe] at h0 h1;
  norm_num [← HW_matrix_ext_iff, h0, h1, h30, h31, h32],
end

lemma try_val_in_P (g : P) :
try (pre_f g) ∈ P :=
begin
  rw try_pre_f_eq_id,
  obtain ⟨a,b⟩ := g,
  exact b
end

@[simp] lemma val_inv {g : P} : inv (pre_f g) = g := 
begin
  rw torsion_free.HW_group_ext',
  have h := try_val_in_P g,
  simp [inv, pre_f, HW_group.HW_apply] with HW_matrix_simp at h,
  simp [inv, pre_f, HW_group.HW_apply, h, try] with HW_matrix_simp,
end

end pre_f

def f : G → F₂P := λ g, finsupp.single (pre_f.inv g) (1 : F₂)

--to make a list of the big sum
lemma finsupp_sum_start {g₁ g₂ : P} :
finsupp.single g₁ (1 : F₂) + finsupp.single g₂ (1 : F₂)
= (list.map f [(pre_f g₁), (pre_f g₂)]).sum := by simp [f]

lemma finsupp_sum_cons {g : P} {l : list G} :
finsupp.single g (1 : F₂) + (list.map f l).sum
= (list.map f ((pre_f g) :: l)).sum := by simp [f]

lemma finsupp_sum_cons' {g : P} {l : list G} :
(list.map f l).sum + finsupp.single g (1 : F₂)
= (list.map f ((pre_f g) :: l)).sum := by rw [add_comm, finsupp_sum_cons]

lemma sum_merge {l₁ l₂ : list G} :
(list.map f l₁).sum + (list.map f l₂).sum = (list.map f (l₁ ++ l₂)).sum := by simp

--to take the first element of a list, search for a second appearance in the list and cancel both
def find (a : G) (l l' : list G) : list G := a :: l ++ l'

lemma find_start {a : G} {l : list G} : (list.map f (a :: l)).sum 
= (list.map f (find a [] l)).sum := by simp [find]

lemma find_start2 {a b : G} {l : list G} : (list.map f (a :: b :: l)).sum 
= (list.map f (find b [] (a :: l))).sum := 
begin
  simp [find],
  abel,
end

lemma find_cancel {a : G} {l l' : list G} : 
(list.map f (find a l (a :: l'))).sum =
(list.map f (l ++ l')).sum := 
begin
  suffices h : 2 • f a = 0,
  { simp [find],
    abel,
    simp [-zsmul_eq_mul],
    exact h },
  simp [f, two_smul_cancel],
end

lemma find_continue {a b : G} {l l' : list G} : 
(list.map f (find a l (b :: l'))).sum =
(list.map f (find a (b :: l) l')).sum
:= 
begin
  simp [find],
  abel
end

namespace unit

variables (k G₁ : Type) [semiring k] [monoid G₁]

def monomial_hom : k × G₁ →* monoid_algebra k G₁ := 
{ to_fun := λ x , finsupp.single x.2 x.1,
  map_one' := rfl,
  map_mul' := λ x y, monoid_algebra.single_mul_single.symm }

def non_trivial_unit (u : F₂P) : Prop := 
(∃ (v : F₂P) , u * v = 1 ∧ v * u = 1)
∧ (∀ (k : F₂) (g : P), finsupp.single g k ≠ u)

@[simp] lemma unit_apply (a b : monoid_algebra k G₁) (h1 h2 g) :
units.mk a b h1 h2 g = a g := rfl

end unit

def a : F₂P := monoid_algebra.of _ _ HW_group.a
def b : F₂P := monoid_algebra.of _ _ HW_group.b

def a' : F₂P := monoid_algebra.of _ _ HW_group.a⁻¹
def b' : F₂P := monoid_algebra.of _ _ HW_group.b⁻¹

def x : F₂P := monoid_algebra.of _ _ HW_group.x
def y : F₂P := monoid_algebra.of _ _ HW_group.y
def z : F₂P := monoid_algebra.of _ _ HW_group.z

def x' : F₂P := monoid_algebra.of _ _ HW_group.x⁻¹
def y' : F₂P := monoid_algebra.of _ _ HW_group.y⁻¹
def z' : F₂P := monoid_algebra.of _ _ HW_group.z⁻¹

def p : F₂P := (1 + x) * (1 + y) * (1 + z')
def q : F₂P := x' * y' + x + y' * z + z
def r : F₂P := 1 + x + y' * z + x * y * z
def s : F₂P := 1 + (x + x' + y + y') * z'

def p' : F₂P := x' * (a * p * a')
def q' : F₂P := -x' * q
def r' : F₂P := -y' * r
def s' : F₂P := z' * (a * s * a')

namespace counter_example_help

lemma counter_example_val_inv_help3 :
(list.map f
  [[-(1 / 2), -1, 1], [3 / 2, -1, 1], [0, 1 / 2, 1 / 2], [3 /
               2, -1, 1], [-(3 / 2), 1, 1], [0, -(1 / 2), -(1 / 2)], [-2, -(1 /
                  2), 1 / 2], [-2, 3 / 2, 1 / 2], [-3, 1 / 2, 1 / 2], [0, -(3 /
                  2), 1 / 2], [-1, 1 / 2, 3 / 2], [-1, 1 / 2, 1 / 2], [-1, 1 /
               2, 1 / 2], [1 / 2, -1, 0], [-(3 / 2), 1, 1], [-1, 1 / 2, -(1 /
                  2)], [0, -(3 / 2), -(1 / 2)], [0, -(1 / 2), 1 / 2], [-1, -(1 /
                  2), 1 / 2], [-(1 / 2), 1 / 2, -(1 / 2)], [-(1 / 2), -(1 /
                  2), 1 / 2], [-(1 / 2), 3 / 2, 1 / 2], [-(3 / 2), 1 / 2, 1 /
               2], [-1, 0, 0], [0, -2, 0], [0, -1, 0], [0, 0, 0], [1, 0, 0], [-1, 1, -1], [1 /
               2, 0, -1], [0, 0, 0], [0, 0, 0], [0, -2, 0], [0, 0, 0], [1 /
               2, 0, -1], [1 / 2, 1, -1], [-(3 / 2), -(1 / 2), -(1 / 2)], [-(3 /
                  2), -(1 / 2), 1 / 2], [-(3 / 2), -(3 / 2), -(1 / 2)], [-(3 /
                  2), 1 / 2, 1 / 2], [-(3 / 2), -(1 / 2), -(1 / 2)], [-(3 /
                  2), -(3 / 2), -(1 / 2)], [-1, 1 / 2, 1 / 2], [-1, 1 / 2, -(1 /
                  2)], [1 / 2, 0, 0], [-(1 / 2), 0, 0], [-(1 / 2), 0, 0], [-(1 /
                  2), 0, 0], [1 / 2, 1, -1], [-1, -(1 / 2), 1 / 2], [-3, 1 /
               2, 1 / 2], [-2, 1 / 2, -(1 / 2)], [0, 1 / 2, 1 / 2], [-1, 1 /
               2, 1 / 2], [-(1 / 2), 1 / 2, 3 / 2], [1 / 2, 1 / 2, -(1 /
                  2)], [0, -1, 0], [-(1 / 2), 3 / 2, -(1 / 2)], [1 / 2, -(1 /
                  2), -(1 / 2)], [1 / 2, 1 / 2, -(1 / 2)], [-(1 / 2), -(1 /
                  2), 1 / 2], [-(5 / 2), 1 / 2, -(1 / 2)], [0, -(3 / 2), 1 /
               2], [0, -(3 / 2), -(1 / 2)], [0, -(1 / 2), 1 / 2], [0, -(1 /
                  2), -(1 / 2)], [-(3 / 2), -(3 / 2), -(1 / 2)], [-(3 / 2), 1 /
               2, -(1 / 2)], [-(5 / 2), -(1 / 2), -(1 / 2)], [-(3 / 2), 1 /
               2, -(1 / 2)], [1 / 2, -(1 / 2), -(1 /
                  2)], [-1, 1, -1], [0, -1, -1], [0, 0, 0], [-(1 /
                  2), -1, 1], [1, 0, 0], [0, -1, 0], [0, -1, -1], [-(5 / 2), 1 /
               2, -(1 / 2)], [-(3 / 2), -(3 / 2), -(1 / 2)], [-(3 / 2), -(1 /
                  2), 1 / 2], [-(5 / 2), -(1 / 2), -(1 / 2)], [-(3 / 2), 3 /
               2, 1 / 2], [0, 0, 0], [1 / 2, -1, 0], [1 / 2, 0, 0], [-(1 /
                  2), 0, 0], [0, 0, 0], [0, -1, 0], [0, 0, 0], [-1, 0, 0], [-(3 /
                  2), 3 / 2, 1 / 2], [-2, -(1 / 2), 1 / 2], [-1, 1 / 2, 3 /
               2], [-2, 1 / 2, -(1 / 2)], [-2, 3 / 2, 1 / 2], [-1, -(3 / 2), -(1 /
                  2)], [-(1 / 2), 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, -(1 /
                  2)], [-(1 / 2), 3 / 2, 1 / 2], [-(1 / 2), 3 / 2, -(1 /
                  2)], [-1, -(3 / 2), -(1 / 2)], [-(1 / 2), 1 / 2, 1 / 2], [-(1 /
                  2), 1 / 2, 3 / 2]]).sum
= 0 :=
begin
  repeat {
    rw find_start,
    try {simp only [find_cancel, list.nil_append, list.cons_append, list.singleton_append]},
    repeat {
      rw find_continue,
      try {rw find_cancel}
    },
    try {simp only [list.nil_append, list.cons_append, list.singleton_append]}
  },
  simp only [list.sum_nil, list.map_nil, eq_self_iff_true]
end

lemma counter_example_val_inv_help2 :
(list.map f
  [[-(5 / 2), 1 / 2, 1 / 2], [-(3 / 2), 3 / 2, 1 / 2], [-(3 / 2), -(1 /
                  2), 1 / 2], [-(3 / 2), 1 / 2, -(1 / 2)], [-2, -(1 / 2), 1 /
               2], [-1, -(1 / 2), 1 / 2], [-1, -(3 / 2), -(1 / 2)], [-2, 1 /
               2, -(1 / 2)], [3 / 2, 0, 0], [-(1 / 2), 1, 0], [1 / 2, 1, -1], [1 /
               2, 0, -1], [1, -1, 1], [1, -1, 0], [1, 0, 1], [1, -1, -1], [1, -1, 0], [-(1 /
                  2), 0, 1], [3 / 2, -1, 1], [-2, 3 / 2, 1 / 2], [-1, -(1 /
                  2), 1 / 2], [-1, 1 / 2, 3 / 2], [-2, 1 / 2, 3 / 2], [-(3 /
                  2), -(1 / 2), -(3 / 2)], [-(3 / 2), -(3 / 2), -(1 / 2)], [-(3 /
                  2), 1 / 2, -(1 / 2)], [-(5 / 2), -(1 / 2), -(1 / 2)], [-(3 /
                  2), 1 / 2, -(1 / 2)], [1 / 2, -(1 / 2), -(1 /
                  2)], [-1, 1, -1], [0, -1, -1], [0, 0, 0], [-1, 0, 0], [-(1 /
                  2), 0, 0], [-(1 / 2), -1, 1], [-(1 / 2), 1, 1], [-(3 /
                  2), 0, 1], [0, -1, 0], [0, 0, 0], [-1, 0, 1], [1, -1, 1], [1 /
               2, 1 / 2, 1 /
               2], [-1, 0, 0], [0, -2, 0], [0, -1, 0], [0, 0, 0], [1, 0, 0], [1, 0, 1], [1 /
               2, -2, 0], [1 / 2, 0, 0], [-(1 / 2), -1, 0], [3 / 2, -1, 0], [-(3 /
                  2), 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, 3 / 2], [-(1 / 2), -(1 /
                  2), -(1 / 2)], [-(3 / 2), -(3 / 2), 1 / 2], [-(3 / 2), -(3 /
                  2), -(1 / 2)], [-(3 / 2), -(1 / 2), 1 / 2], [-(3 / 2), -(1 /
                  2), -(1 /
                  2)], [0, 0, 0], [-2, 0, 0], [-1, 1, 0], [-1, -1, -1], [-1, 0, 1], [-1, -1, 0], [-(1 /
                  2), 1, -1], [-(1 / 2), 0, 0], [-(1 / 2), 2, 0], [-(3 /
                  2), 1, 0], [-(1 / 2), 1, 1], [3 / 2, -1, 0], [1 /
               2, 1, 0], [-1, -(1 / 2), 1 / 2], [-3, 1 / 2, 1 / 2], [-2, 1 /
               2, -(1 / 2)], [0, 1 / 2, 1 / 2], [-1, 1 / 2, 1 / 2], [-(1 /
                  2), -(1 / 2), -(1 /
                  2)], [0, 2, 0], [1, -1, -1], [0, 1, -1], [-(1 / 2), -(1 /
                  2), -(1 / 2)], [-(5 / 2), 1 / 2, -(1 / 2)], [-(3 / 2), 1 /
               2, -(3 / 2)], [-(3 / 2), -(1 / 2), -(3 / 2)], [-1, -(1 / 2), 3 /
               2], [-1, -(1 / 2), 1 / 2], [-1, 1 / 2, 3 / 2], [-1, 1 / 2, 1 /
               2], [-2, -(1 / 2), 3 / 2], [-2, -(1 / 2), 1 / 2], [-2, 1 / 2, 3 /
               2], [-2, 1 / 2, -(1 / 2)], [-2, 3 / 2, 1 / 2], [-1, -(1 / 2), -(1 /
                  2)], [-1, 1 / 2, 1 / 2], [-1, -(3 / 2), 1 / 2], [-1, -(1 /
                  2), 3 / 2], [-2, -(1 / 2), 3 / 2], [-(3 / 2), 1 / 2, -(3 /
                  2)], [-(3 / 2), -(1 / 2), -(1 / 2)], [-(3 / 2), 3 / 2, -(1 /
                  2)], [-(5 / 2), 1 / 2, -(1 / 2)], [-(1 / 2), 1 / 2, -(1 /
                  2)], [0, 1, -1], [-1, 0, 0], [-1, 0, -1], [-1, 1, 0], [-1, 1, -1], [1 /
               2, -(1 / 2), 1 / 2], [-(3 / 2), -(1 / 2), 1 /
               2], [0, 0, -1], [0, 0, 0], [0, -1, -1], [0, -1, 0], [1, 0, 0], [1 /
               2, -1, 1], [3 / 2, 0, 0], [-(1 / 2), 0, 1], [1 / 2, 1, 1], [-1, 3 /
               2, 1 / 2], [0, -(1 / 2), 1 / 2], [0, 1 / 2, 3 / 2], [-1, 1 / 2, 3 /
               2], [0, -(1 / 2), 3 / 2], [0, -(1 / 2), 1 / 2], [0, 1 / 2, 3 /
               2], [0, -(3 / 2), 1 / 2], [0, -(1 / 2), -(1 / 2)], [-(1 / 2), 1 /
               2, 1 / 2], [1 / 2, 1 / 2, 1 / 2], [1 / 2, -(1 / 2), -(1 /
                  2)], [-(1 / 2), 3 / 2, -(1 /
                  2)], [0, -1, 0], [-2, 0, 0], [-1, 0, -1], [-1, -1, -1], [-(1 /
                  2), 0, 1], [-(1 / 2), 0, 0], [-(1 / 2), 1, 1], [-(1 /
                  2), 1, 0], [0, -1, 0], [0, -1, -1], [0, 0, 0], [0, 0, 0], [1 /
               2, 0, -1], [1 / 2, -(1 / 2), -(1 / 2)], [-(3 / 2), -(1 / 2), -(1 /
                  2)], [0, -(3 / 2), 1 / 2], [0, -(3 / 2), -(1 / 2)], [0, -(1 /
                  2), 1 / 2], [0, -(1 / 2), -(1 / 2)], [-1, -(3 / 2), 1 /
               2], [-1, -(3 / 2), -(1 / 2)], [-1, 1 / 2, 1 / 2], [0, 1 / 2, -(1 /
                  2)], [0, -(1 / 2), -(1 / 2)], [1 / 2, -(1 / 2), 1 / 2], [1 /
               2, -(1 / 2), -(1 / 2)], [1 / 2, 1 / 2, 1 / 2], [1 / 2, 1 / 2, -(1 /
                  2)], [-(1 / 2), -(1 / 2), 1 / 2], [-(1 / 2), -(1 / 2), -(1 /
                  2)], [-(1 / 2), 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, -(1 /
                  2)], [2, 0, 0], [0, 0, 0], [1, 1, 0], [1, -1, 0], [1, 0, -1], [-(3 /
                  2), 1, 1], [0, -(1 / 2), -(1 / 2)], [-2, -(1 / 2), 1 /
               2], [-2, 3 / 2, 1 / 2], [-3, 1 / 2, 1 / 2], [0, -(3 / 2), 1 /
               2], [0, -(1 / 2), 3 / 2], [-1, -(1 / 2), 1 / 2], [-1, 1 / 2, 3 /
               2], [-1, 1 / 2, 1 / 2], [0, 1 / 2, -(1 / 2)], [-2, 1 / 2, -(1 /
                  2)], [1 / 2, -1, 0], [-(3 / 2), 1, 1], [-(1 / 2), -1, 0], [-(1 /
                  2), 0, 1], [-(3 / 2), 0, 1], [1 / 2, 1 / 2, 1 / 2], [-(3 /
                  2), 1 / 2, 1 / 2], [-(1 / 2), 3 / 2, 1 / 2], [-(1 / 2), -(1 /
                  2), 1 / 2], [-(1 / 2), 1 / 2, -(1 / 2)], [-1, -(1 / 2), 1 /
               2], [0, -(1 / 2), 1 / 2], [0, -(3 / 2), -(1 / 2)], [-1, 1 /
               2, -(1 / 2)], [1 / 2, 0, 0], [-(3 / 2), 1, 0], [-(1 /
                  2), 1, -1], [-(1 / 2), 0, 0], [-(1 / 2), 0, 0], [1 /
               2, 1, -1], [1 / 2, 1, 0], [-(1 / 2), 0, 0], [3 /
               2, -1, 1], [1, 0, -1], [0, 0, 0], [0, 0, -1], [0, 1, 0], [0, 1, -1], [-(1 /
                  2), 1 / 2, 3 / 2], [-(1 / 2), 1 / 2, 1 / 2], [-1, -(3 /
                  2), -(1 / 2)], [-(3 / 2), 1 / 2, 1 /
               2], [1, 0, 1], [-1, 1, 1], [0, 1, 0], [0, 0, 0], [1 /
               2, -1, 0], [1 / 2, 0, 0], [-(1 /
                  2), 0, 0], [0, 0, 0], [0, -1, 0], [0, 0, 0], [-1, 0, 1], [1, 0, 1], [-(5 /
                  2), 1 / 2, -(1 / 2)], [-(5 / 2), 1 / 2, 1 / 2], [-(5 / 2), -(1 /
                  2), -(1 / 2)], [-(3 / 2), -(1 / 2), 1 / 2], [-(3 / 2), -(3 /
                  2), -(1 / 2)], [-(5 / 2), 1 / 2, -(1 /
                  2)], [2, 0, 0], [-1, 0, 1], [-1, 0, 0], [-1, 1, 1], [-1, 1, 0], [1 /
               2, 1 / 2, -(1 / 2)], [-(3 / 2), 1 / 2, 1 / 2], [-(3 / 2), -(3 /
                  2), 1 / 2], [-(3 / 2), 1 / 2, 1 / 2], [-(3 / 2), -(1 / 2), -(1 /
                  2)], [-(3 / 2), -(3 / 2), -(1 / 2)], [-1, 1 / 2, 1 /
               2], [-1, 1 / 2, -(1 / 2)], [-1, 3 / 2, 1 / 2], [-2, 3 / 2, 1 /
               2], [0, 1 / 2, 1 / 2], [-(1 / 2), 0, 0], [1 / 2, -2, 0], [1 /
               2, -1, 1], [-(1 /
                  2), -1, 1], [0, 1, -1], [0, 0, 0], [0, 2, 0], [-1, 1, 0], [1, 1, 0], [-(3 /
                  2), 3 / 2, -(1 / 2)], [-(3 / 2), 3 / 2, 1 / 2], [-(3 / 2), 1 /
               2, -(1 / 2)], [-(3 / 2), 1 / 2, 1 / 2], [-(1 / 2), 3 / 2, -(1 /
                  2)], [-(1 / 2), 3 / 2, 1 / 2], [-(1 / 2), 1 / 2, -(1 /
                  2)], [-(1 / 2), 1 / 2, 1 / 2], [-1, -(3 / 2), -(1 /
                  2)], [-1, -(1 / 2), -(1 / 2)], [-2, -(1 / 2), 1 / 2], [0, -(3 /
                  2), 1 / 2], [-(1 / 2), 2, 0], [1 / 2, 0, 0], [1 /
               2, 1, 1], [-(1 /
                  2), 1, 1], [0, -1, -1], [0, -2, 0], [0, 0, 0], [-1, -1, 0], [1, -1, 0]]).sum =
0 :=
begin
  iterate 87 {
    rw find_start,
    try {simp only [find_cancel, list.nil_append, list.cons_append, list.singleton_append]},
    repeat {
      rw find_continue,
      try {rw find_cancel}
    },
    try {simp only [list.nil_append, list.cons_append, list.singleton_append]}
  },
  exact counter_example_val_inv_help3
end

lemma counter_example_val_inv_help :
(list.map f [[-2, 1 / 2, 1 / 2], [-2, 1 / 2, 3 / 2], [-2, -(1 / 2), 1 / 2], [-2, -(1 / 2), 3 / 2],
   [-1, 1 / 2, 1 / 2], [-1, 1 / 2, 3 / 2], [-1, -(1 / 2), 1 / 2], [-1, -(1 / 2), 3 / 2], 
   [-(3 / 2), -(1 / 2), -(3 / 2)], [-(3 / 2), 1 / 2, -(3 / 2)], [-(5 / 2), 1 / 2, -(1 / 2)], 
   [-(1 / 2), -(1 / 2), -(1 / 2)], [0, 1, -1], [1, -1, -1], [0, 2, 0], [-(1 / 2), -(3 / 2), 1 / 2],
   [-(5 / 2), -(1 / 2), 1 / 2], [-(3 / 2), -(1 / 2), -(1 / 2)], [-(3 / 2), -(3 / 2), -(1 / 2)], 
   [-1, 1 / 2, 1 / 2], [-1, 1 / 2, -(1 / 2)], [-1, 3 / 2, 1 / 2], [-1, 3 / 2, -(1 / 2)], 
   [-2, 1 / 2, 1 / 2], [-2, 1 / 2, -(1 / 2)], [-2, 3 / 2, 1 / 2], [-1, -(1 / 2), -(1 / 2)], 
   [-1, 1 / 2, 1 / 2], [-2, 1 / 2, 1 / 2], [-(3 / 2), -(1 / 2), -(1 / 2)], 
   [-(3 / 2), -(3 / 2), 1 / 2], [-(3 / 2), 1 / 2, 1 / 2], [-(5 / 2), -(1 / 2), 1 / 2], 
   [-(1 / 2), -(1 / 2), 1 / 2], [0, 1, -1], [0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 1, -1], 
   [0, 0, 1], [0, 0, 0], [0, 1, 1], [0, 1, 0], [-(1 / 2), 1 / 2, -(1 / 2)], 
   [-(5 / 2), 1 / 2, -(1 / 2)], [-(3 / 2), 3 / 2, -(1 / 2)], [-(3 / 2), -(1 / 2), -(1 / 2)], 
   [-(3 / 2), 1 / 2, -(3 / 2)], [-2, -(1 / 2), 3 / 2], [-1, -(1 / 2), 3 / 2], [-1, -(3 / 2), 1 / 2],
   [-2, 1 / 2, 1 / 2], [3 / 2, 0, 1], [-(1 / 2), 1, 1], [-(3 / 2), 1, 0], [-(1 / 2), 2, 0], 
   [-(1 / 2), 0, 0], [-(1 / 2), 1, -1], [-1, -1, 0], [-1, 0, 1], [-1, 0, 0], [0, 0, 1], [0, -1, 0],
   [0, -1, 1], [-(1 / 2), 0, -1], [-(1 / 2), 1, -1], [-(3 / 2), 1, 0], [1 / 2, 0, 0], 
   [-1, 1 / 2, -(1 / 2)], [0, -(3 / 2), -(1 / 2)], [0, -(1 / 2), 1 / 2], [-1, -(1 / 2), 1 / 2], 
   [-(1 / 2), 1 / 2, -(1 / 2)], [-(1 / 2), -(1 / 2), 1 / 2], [-(1 / 2), 3 / 2, 1 / 2], 
   [-(3 / 2), 1 / 2, 1 / 2], [1 / 2, 1 / 2, 1 / 2], [-1, 0, -1], [-1, 0, 0], [-1, -1, -1], 
   [-1, -1, 0], [0, 0, -1], [0, 0, 0], [0, -1, -1], [0, -1, 0], [-(3 / 2), 0, 1], [1 / 2, -1, 1], 
   [-1, 3 / 2, 1 / 2], [0, -(1 / 2), 1 / 2], [0, 1 / 2, 3 / 2], [-1, 1 / 2, 3 / 2],
   [-(1 / 2), -(1 / 2), -(3 / 2)], [-(1 / 2), -(3 / 2), -(1 / 2)], [-(1 / 2), 1 / 2, -(1 / 2)], 
   [-(3 / 2), -(1 / 2), -(1 / 2)], [1 / 2, -(1 / 2), -(1 / 2)], [1 / 2, 0, 0], [1 / 2, -1, 1], 
   [1 / 2, 1, 1], [-(1 / 2), 0, 1], [3 / 2, 0, 0], [1 / 2, -1, 1], [1, 0, 0], [0, -1, 0], 
   [0, -1, -1], [0, 0, 0], [0, 0, -1], [-(1 / 2), 1 / 2, 1 / 2], [-(5 / 2), 1 / 2, 1 / 2], 
   [-(3 / 2), 3 / 2, 1 / 2], [-(3 / 2), -(1 / 2), 1 / 2], [-(3 / 2), 1 / 2, -(1 / 2)], 
   [-2, -(1 / 2), 1 / 2], [-1, -(1 / 2), 1 / 2], [-1, -(3 / 2), -(1 / 2)], [-2, 1 / 2, -(1 / 2)], 
   [3 / 2, 0, 0], [-(1 / 2), 1, 0], [1 / 2, 1, -1], [1 / 2, 0, -1], [1, -1, 1], [1, -1, 0], 
   [1, 0, 1], [1, -1, -1], [1, -1, 0], [-(1 / 2), 0, 1], [3 / 2, -1, 1], [-2, 3 / 2, 1 / 2], 
   [-1, -(1 / 2), 1 / 2], [-1, 1 / 2, 3 / 2], [-2, 1 / 2, 3 / 2], [-(3 / 2), -(1 / 2), -(3 / 2)], 
   [-(3 / 2), -(3 / 2), -(1 / 2)], [-(3 / 2), 1 / 2, -(1 / 2)], [-(5 / 2), -(1 / 2), -(1 / 2)], 
   [-(1 / 2), -(1 / 2), -(1 / 2)], [-(3 / 2), 1, 0], [-(3 / 2), 1, 1], [-(3 / 2), 0, 0], 
   [-(3 / 2), 0, 1], [-(1 / 2), 1, 0], [-(1 / 2), 1, 1], [-(1 / 2), 0, 0], [-(1 / 2), 0, 1], 
   [-1, -1, -1], [-1, 0, -1], [-2, 0, 0], [0, -1, 0], [-(1 / 2), 3 / 2, -(1 / 2)], 
   [1 / 2, -(1 / 2), -(1 / 2)], [1 / 2, 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, 1 / 2], 
   [0, -(1 / 2), -(1 / 2)], [0, -(3 / 2), 1 / 2], [0, 1 / 2, 1 / 2], [-1, -(1 / 2), 1 / 2], 
   [1, -(1 / 2), 1 / 2], [1 / 2, 0, 0], [-(3 / 2), 0, 1], [-(1 / 2), 1, 1], [-(1 / 2), -1, 1], 
   [-(1 / 2), 0, 0], [-1, 0, 0], [0, 0, 0], [0, -1, -1], [-1, 1, -1], [1 / 2, -(1 / 2), -(1 / 2)], 
   [-(3 / 2), 1 / 2, -(1 / 2)], [-(1 / 2), 1 / 2, -(3 / 2)], [-(1 / 2), -(1 / 2), -(3 / 2)], 
   [0, -(1 / 2), 3 / 2], [0, -(1 / 2), 1 / 2], [0, 1 / 2, 3 / 2], [0, 1 / 2, 1 / 2], 
   [-1, -(1 / 2), 3 / 2], [-1, -(1 / 2), 1 / 2], [-1, 1 / 2, 3 / 2], [-1, 1 / 2, 1 / 2], 
   [0, 1 / 2, -(1 / 2)], [-2, 1 / 2, -(1 / 2)], [1 / 2, -1, 0], [-(3 / 2), 0, 0], 
   [-(1 / 2), 0, -1], [-(1 / 2), 0, 0], [-(1 / 2), 0, 0], [1 / 2, 1, -1], [1 / 2, 1, 0], 
   [1 / 2, 0, -1], [1 / 2, 0, 0], [0, -1, 0], [0, 0, 0], [-1, 0, 1], [1, -1, 1], 
   [-(3 / 2), 3 / 2, 1 / 2], [-(1 / 2), -(1 / 2), 1 / 2], [-(1 / 2), 1 / 2, 3 / 2], 
   [-(3 / 2), 1 / 2, 3 / 2], [-1, -(1 / 2), -(3 / 2)], [-1, -(3 / 2), -(1 / 2)], 
   [-1, 1 / 2, -(1 / 2)], [-2, -(1 / 2), -(1 / 2)], [0, 1 / 2, 1 / 2], [-1, 1 / 2, 1 / 2], 
   [-(1 / 2), -(1 / 2), -(1 / 2)], [-(1 / 2), -(3 / 2), 1 / 2], [-(1 / 2), 1 / 2, 1 / 2], 
   [-(3 / 2), -(1 / 2), 1 / 2], [1 / 2, -(1 / 2), 1 / 2], [-1, 1, -1], [-1, 1, 0], [-1, 0, -1], 
   [-1, 0, 0], [0, 1, -1], [0, 1, 0], [0, 0, -1], [0, 0, 0], [1 / 2, 0, -1], [1 / 2, 0, 0], 
   [1 / 2, -1, -1], [1 / 2, -1, 0], [0, 0, 0], [0, 1, 0], [-1, 1, 1], [1, 0, 1], 
   [-(3 / 2), 1 / 2, 1 / 2], [-(1 / 2), -(3 / 2), 1 / 2], [-(1 / 2), -(1 / 2), 3 / 2], 
   [-(3 / 2), -(1 / 2), 3 / 2], [-1, 1 / 2, -(3 / 2)], [-1, -(1 / 2), 1 / 2], 
   [-1, -(3 / 2), -(1 / 2)], [-1, -(3 / 2), 1 / 2], [0, -(1 / 2), -(1 / 2)], [0, -(1 / 2), 1 / 2], 
   [0, -(3 / 2), -(1 / 2)], [0, -(3 / 2), 1 / 2], [-(1 / 2), 1 / 2, -(1 / 2)], 
   [-(1 / 2), 3 / 2, -(1 / 2)], [-(3 / 2), 3 / 2, 1 / 2], [1 / 2, 1 / 2, 1 / 2], [-1, 0, 0], 
   [0, -2, 0], [0, -1, 0], [0, 0, 0], [0, 1, 1], [0, 1, 0], [-1, 0, 1], [-1, 0, 0], [-1, 1, 1], 
   [-1, 1, 0], [1 / 2, 1 / 2, -(1 / 2)], [-(3 / 2), 1 / 2, -(1 / 2)], [-(1 / 2), 3 / 2, -(1 / 2)], 
   [-(1 / 2), -(1 / 2), -(1 / 2)], [-(1 / 2), 1 / 2, -(3 / 2)], [-1, -(1 / 2), 3 / 2], 
   [0, -(1 / 2), 3 / 2], [0, -(3 / 2), 1 / 2], [-1, 1 / 2, 1 / 2], [1 / 2, 0, 1], [-(3 / 2), 1, 1], 
   [-(1 / 2), 1, -1], [-1, 1 / 2, 1 / 2], [-3, 1 / 2, 1 / 2], [-2, 3 / 2, 1 / 2], 
   [-2, -(1 / 2), 1 / 2], [-2, 1 / 2, -(1 / 2)], [-(5 / 2), -(1 / 2), 1 / 2], 
   [-(3 / 2), -(1 / 2), 1 / 2], [-(3 / 2), -(3 / 2), -(1 / 2)], [-(5 / 2), 1 / 2, -(1 / 2)], 
   [2, 0, 0], [0, 1, 0], [1, 1, -1], [1, 0, -1], [3 / 2, -1, 1], [-(1 / 2), 0, 0], [1 / 2, 0, -1], 
   [1 / 2, -1, -1], [1, 0, 1], [1, 0, 0], [0, 1, 1], [1 / 2, -1, -1], [1 / 2, -2, 0], 
   [1 / 2, 0, 0], [-(1 / 2), -1, 0], [3 / 2, -1, 0], [-(3 / 2), 1 / 2, 1 / 2], 
   [-(3 / 2), 1 / 2, 3 / 2], [-(3 / 2), -(1 / 2), 1 / 2], [-(3 / 2), -(1 / 2), 3 / 2], 
   [-(1 / 2), 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, 3 / 2], [-(1 / 2), -(1 / 2), 1 / 2], 
   [-(1 / 2), -(1 / 2), 3 / 2], [-1, -(1 / 2), -(3 / 2)], [-1, 1 / 2, -(3 / 2)], 
   [-2, 1 / 2, -(1 / 2)], [0, -(1 / 2), -(1 / 2)], [-(1 / 2), 1, -1], [1 / 2, -1, -1], [1 / 2, 0, 0],
   [-(1 / 2), 0, 0], [0, 0, 0], [0, -1, 1], [0, 1, 1], [-1, 0, 1], [1, 0, 1], 
   [-(5 / 2), 1 / 2, -(1 / 2)], [-(5 / 2), 1 / 2, 1 / 2], [-(5 / 2), -(1 / 2), -(1 / 2)], 
   [-(5 / 2), -(1 / 2), 1 / 2], [-(3 / 2), 1 / 2, -(1 / 2)], [-(3 / 2), 1 / 2, 1 / 2], 
   [-(3 / 2), -(1 / 2), -(1 / 2)], [-(3 / 2), -(1 / 2), 1 / 2], [-2, -(1 / 2), -(1 / 2)], 
   [-2, 1 / 2, -(1 / 2)], [-3, 1 / 2, 1 / 2], [-1, -(1 / 2), 1 / 2], [1 / 2, 1, 0], [3 / 2, -1, 0],
   [3 / 2, 0, 1], [1 / 2, 0, 1], [1, 0, -1], [1, -1, 0], [1, 1, 0], [0, 0, 0], [2, 0, 0], 
   [-(1 / 2), 1 / 2, -(1 / 2)], [-(1 / 2), 1 / 2, 1 / 2], [-(1 / 2), -(1 / 2), -(1 / 2)], 
   [-(1 / 2), -(1 / 2), 1 / 2], [1 / 2, 1 / 2, -(1 / 2)], [1 / 2, 1 / 2, 1 / 2], 
   [1 / 2, -(1 / 2), -(1 / 2)], [1 / 2, -(1 / 2), 1 / 2], [0, -(1 / 2), -(1 / 2)], 
   [0, 1 / 2, -(1 / 2)], [-1, 1 / 2, 1 / 2], [1, -(1 / 2), 1 / 2], [-(3 / 2), 1, 0], 
   [-(1 / 2), -1, 0], [-(1 / 2), 0, 1], [-(3 / 2), 0, 1], [-1, 0, -1], [-1, -1, 0], [-1, 1, 0], 
   [-2, 0, 0], [0, 0, 0], [-(3 / 2), -(1 / 2), -(1 / 2)], [-(3 / 2), -(1 / 2), 1 / 2], 
   [-(3 / 2), -(3 / 2), -(1 / 2)], [-(3 / 2), -(3 / 2), 1 / 2], [-(1 / 2), -(1 / 2), -(1 / 2)], 
   [-(1 / 2), -(1 / 2), 1 / 2], [-(1 / 2), -(3 / 2), -(1 / 2)], [-(1 / 2), -(3 / 2), 1 / 2], 
   [-1, 1 / 2, -(1 / 2)], [-1, 3 / 2, -(1 / 2)], [-2, 3 / 2, 1 / 2], [0, 1 / 2, 1 / 2], 
   [-(1 / 2), 0, 0], [1 / 2, -2, 0], [1 / 2, -1, 1], [-(1 / 2), -1, 1], [0, 1, -1], [0, 0, 0], 
   [0, 2, 0], [-1, 1, 0], [1, 1, 0], [-(3 / 2), 3 / 2, -(1 / 2)], [-(3 / 2), 3 / 2, 1 / 2], 
   [-(3 / 2), 1 / 2, -(1 / 2)], [-(3 / 2), 1 / 2, 1 / 2], [-(1 / 2), 3 / 2, -(1 / 2)], 
   [-(1 / 2), 3 / 2, 1 / 2], [-(1 / 2), 1 / 2, -(1 / 2)], [-(1 / 2), 1 / 2, 1 / 2], 
   [-1, -(3 / 2), -(1 / 2)], [-1, -(1 / 2), -(1 / 2)], [-2, -(1 / 2), 1 / 2], [0, -(3 / 2), 1 / 2],
   [-(1 / 2), 2, 0], [1 / 2, 0, 0], [1 / 2, 1, 1], [-(1 / 2), 1, 1], [0, -1, -1], [0, -2, 0], 
   [0, 0, 0], [-1, -1, 0], [1, -1, 0]]).sum 
= 0 :=
begin
  iterate 57 {
    rw find_start,
    try {simp only [find_cancel, list.nil_append, list.cons_append, list.singleton_append]},
    repeat {
      rw find_continue,
      try {rw find_cancel}
    },
    try {simp only [list.nil_append, list.cons_append, list.singleton_append]}
  },
  exact counter_example_val_inv_help2,
end

lemma counter_example_inv_val_help2 :
(list.map f
  [[1, -(3 / 2), -(1 / 2)], [-(1 / 2), 3, -1], [1 / 2, 1, -1], [1 /
               2, 2, 0], [-(1 / 2), 2, 0], [0, -1, 1], [1 / 2, 5 / 2, -(1 /
                  2)], [-(1 / 2), 3 / 2, -(1 / 2)], [1 / 2, 3 / 2, -(3 / 2)], [1 /
               2, 3 / 2, -(1 / 2)], [1 / 2, 3 / 2, -(3 / 2)], [1 / 2, 2, -1], [3 /
               2, 0, -1], [3 / 2, 1, 0], [-(3 / 2), 1, 0], [-(1 /
                  2), 0, 0], [-(1 / 2), 2, 0], [1 / 2, 2, 0], [-(1 /
                  2), 2, 0], [1, -(1 / 2), 1 / 2], [-1, 1 / 2, 1 / 2], [0, 1 /
               2, -(3 / 2)], [0, 3 / 2, -(1 / 2)], [0, 1 / 2, -(3 / 2)], [1 /
               2, 1 / 2, -(1 / 2)], [1 / 2, 1 / 2, 1 / 2], [1 / 2, -(1 / 2), -(1 /
                  2)], [1 / 2, -(1 / 2), 1 / 2], [1 / 2, 1, -1], [1 /
               2, 2, -1], [-(1 / 2), 2, 0], [3 / 2, 1, 0], [-1, 1 / 2, -(1 /
                  2)], [0, -(3 / 2), -(1 / 2)], [-1, 1 / 2, -(1 / 2)], [-1, 1 /
               2, 1 / 2], [-1, -(1 / 2), -(1 / 2)], [1 / 2, 1 / 2, 1 /
               2], [0, -1, 1], [1 / 2, 1 / 2, 1 / 2], [-(1 / 2), 3 / 2, -(1 /
                  2)], [-(1 / 2), 1 / 2, -(1 / 2)], [1 / 2, 5 / 2, -(1 / 2)], [1 /
               2, 1 / 2, -(1 / 2)], [3 / 2, 3 / 2, 1 / 2], [1 / 2, 1, -2], [1 /
               2, 1, -1], [1 / 2, 0, -2], [1 / 2, 0, -1], [-(1 /
                  2), 1, -2], [-(1 / 2), 1, -1], [-(1 / 2), 0, -2], [-(1 /
                  2), 0, -1], [1, -(1 / 2), -(3 / 2)], [-1, -(1 / 2), -(3 /
                  2)], [0, -(3 / 2), -(3 / 2)], [0, 1 / 2, -(3 / 2)], [0, -(1 /
                  2), -(1 / 2)], [-1, -(1 / 2), -(1 / 2)], [0, -(1 / 2), -(1 /
                  2)], [0, -(3 / 2), -(1 / 2)], [3 / 2, 1, 0], [-(1 /
                  2), 0, -1], [-(3 / 2), 2, -1], [2, -(1 / 2), -(1 / 2)], [0, 1 /
               2, -(1 / 2)], [-1, 1 / 2, -(3 / 2)], [0, -(3 / 2), -(3 / 2)], [1 /
               2, 3 / 2, -(1 / 2)], [1, -(1 / 2), -(3 / 2)], [1, -(1 / 2), -(1 /
                  2)], [1, -(3 / 2), -(3 / 2)], [1, -(3 / 2), -(1 / 2)], [0, -(1 /
                  2), -(3 / 2)], [0, 1 / 2, 1 / 2], [0, 1 / 2, -(1 / 2)], [-(1 /
                  2), 1 / 2, -(3 / 2)], [-(1 / 2), 3 / 2, -(1 / 2)], [-(1 /
                  2), 1 / 2, -(3 / 2)], [-(1 / 2), 1 / 2, -(1 / 2)], [3 /
               2, 0, -1], [-(1 / 2), 0, -1], [1 / 2, -1, -1], [-(1 /
                  2), 2, -2], [-(1 / 2), 1, -2], [0, 0, -1], [-(1 /
                  2), 2, 0], [-(3 /
                  2), 1, -1], [-1, 0, 1], [-1, 1, 0], [-1, -1, 1], [3 / 2, 3 /
               2, 1 / 2], [1, 1, 0], [3 / 2, 1, -1], [3 / 2, 1, 0], [-(1 /
                  2), 1, -1], [1 / 2, 1, -2], [1 /
               2, 0, -2], [0, 1, 0], [0, 1, 1], [0, 0, -1], [0, 1, 0], [0, 1, -1], [0, 1, 1], [2, -(1 /
                  2), -(1 / 2)], [0, -(1 / 2), -(1 / 2)], [1, -(3 / 2), -(1 /
                  2)], [1, 1 / 2, -(1 / 2)], [1, -(3 / 2), -(1 / 2)], [0, 1 /
               2, -(1 / 2)], [0, 1 / 2, -(3 / 2)], [1, -(3 / 2), -(3 /
                  2)], [1, -(1 / 2), -(1 / 2)], [0, -(1 / 2), -(1 / 2)], [1 /
               2, 1 / 2, -(1 / 2)], [1 / 2, 3 / 2, 1 / 2], [1 / 2, 3 / 2, -(1 /
                  2)], [1 / 2, 1 / 2, -(1 /
                  2)], [0, 1, -1], [1, -1, -1], [1, 0, 0], [1, -1, -1], [0, 2, 0], [1 /
               2, 3 / 2, 1 / 2], [1 / 2, 1 / 2, 3 / 2], [0, 1 / 2, -(1 /
                  2)], [1, 1 / 2, 1 / 2], [1, -(1 / 2), -(1 / 2)], [1, -(1 /
                  2), 1 / 2], [1 / 2, 0, -1], [-(3 / 2), 1, -1], [-(1 /
                  2), 1, -2], [-(1 /
                  2), 0, -2], [0, 1, 0], [0, 1, 1], [0, 1, 0], [0, 1, -1], [-(1 /
                  2), 0, -1], [-(1 / 2), 1, -1], [-(3 / 2), 1, 0], [1 /
               2, 0, 0], [0, 3 / 2, -(1 / 2)], [1, -(1 / 2), -(1 / 2)], [1, 1 /
               2, 1 / 2], [0, 1 / 2, 1 / 2], [1 / 2, 1 / 2, 1 / 2], [1 / 2, 3 /
               2, -(1 / 2)], [1 / 2, -(1 / 2), -(1 / 2)], [-(1 / 2), 3 / 2, 1 /
               2], [-(1 / 2), 3 / 2, -(1 / 2)], [-1, -(1 / 2), -(3 / 2)], [-1, 1 /
               2, -(3 / 2)], [0, 1 / 2, -(1 / 2)], [-(1 / 2), 1, -1], [-(1 /
                  2), 1, -2], [-(1 / 2), 2, -1], [-(1 / 2), 2, -2], [1 /
               2, 1, -1], [1 / 2, 1, -2], [1 / 2, 2, -1], [1 /
               2, 2, -2], [0, -1, 0], [0, 0, 0], [-1, 0, 1], [0, 1, -1], [0, -1, 0], [-1, -1, 1], [-(1 /
                  2), 2, 0], [-(1 / 2), 3, -1], [-(1 / 2), 1, -1], [-(3 /
                  2), 2, -1], [1 / 2, 2, -1], [-1, 1 / 2, -(1 / 2)], [3 /
               2, 1, -1], [-(1 / 2), 2, -1], [1 / 2, 2, -2], [1 /
               2, 1, -2], [1, 0, 0], [-(1 / 2), 3 / 2, 1 / 2], [1 / 2, -(1 /
                  2), 1 / 2], [1 / 2, 1 / 2, 3 / 2], [-1, 1 / 2, -(1 /
                  2)], [0, 1 / 2, -(1 / 2)], [0, -(1 / 2), -(3 / 2)], [1, 1 /
               2, -(1 / 2)], [-(1 / 2), 1, -1], [1 / 2, -1, -1], [1 /
               2, 0, 0], [-(1 /
                  2), 0, 0], [0, 1, 1], [0, 2, 0], [0, 0, 0], [-1, 1, 0], [1, 1, 0]]).sum =
      0 :=
begin
  repeat {
    rw find_start,
    try {simp only [find_cancel, list.nil_append, list.cons_append, list.singleton_append]},
    repeat {
      rw find_continue,
      try {rw find_cancel}
    },
    try {simp only [list.nil_append, list.cons_append, list.singleton_append]}
  },
  simp only [list.sum_nil, list.map_nil, eq_self_iff_true]
end

lemma counter_example_inv_val_help :
(list.map f
  [[1, 0, 0], [1, -1, -1], [1, -1, 0], [0, 0, -1], [0, 1, 1], [0, 1, 0], [-(1 /
                    2), 0, -2], [-(1 / 2), 1, -2], [-(3 / 2), 1, -1], [1 /
                 2, 0, -1], [1, -(1 / 2), 1 / 2], [1, -(1 / 2), -(1 / 2)], [1, 1 /
                 2, 1 / 2], [1, 1 / 2, -(1 / 2)], [1 / 2, 1 / 2, -(3 / 2)], [1 /
                 2, 3 / 2, -(3 / 2)], [-(1 / 2), 3 / 2, -(1 / 2)], [1 / 2, 5 /
                 2, -(1 /
                    2)], [-1, 0, -1], [-1, 0, 0], [-1, -1, -1], [-1, -1, 0], [3 /
                 2, 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, 1 / 2], [1 / 2, -(1 / 2), 1 /
                 2], [1 / 2, 3 / 2, 1 / 2], [1 / 2, 1 / 2, 3 / 2], [0, 1 / 2, -(1 /
                    2)], [1, 1 / 2, -(1 / 2)], [3 / 2, 3 / 2, -(1 / 2)], [3 / 2, 3 /
                 2, 1 / 2], [3 / 2, 1 / 2, -(1 / 2)], [3 / 2, 1 / 2, 1 / 2], [1 /
                 2, 3 / 2, -(1 / 2)], [1 / 2, 3 / 2, 1 / 2], [1 / 2, 1 / 2, -(1 /
                    2)], [1 / 2, 1 / 2, 1 /
                 2], [2, 0, 0], [0, 0, 0], [1, -1, 0], [1, 1, 0], [1, 0, 1], [1 /
                 2, 1, 0], [3 / 2, 1, 0], [3 / 2, 0, -1], [1 / 2, 2, -1], [1 /
                 2, 3 / 2, -(3 / 2)], [1 / 2, 3 / 2, -(1 / 2)], [1 / 2, 1 / 2, -(3 /
                    2)], [1 / 2, 1 / 2, -(1 / 2)], [-(1 / 2), 3 / 2, -(3 /
                    2)], [-(1 / 2), 3 / 2, -(1 / 2)], [-(1 / 2), 1 / 2, -(3 /
                    2)], [-(1 / 2), 1 / 2, -(1 / 2)], [3 / 2, 0, -1], [-(1 /
                    2), 0, -1], [1 / 2, -1, -1], [1 / 2, 1, -1], [1 /
                 2, 0, 0], [0, 1, 1], [1, 1, 1], [1, 0, 0], [0, 2, 0], [1 / 2, -(1 /
                    2), 1 / 2], [-(3 / 2), 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, -(1 /
                    2)], [-(1 / 2), -(1 / 2), -(1 / 2)], [0, 3 / 2, -(3 /
                    2)], [0, 3 / 2, -(1 / 2)], [0, 1 / 2, -(3 / 2)], [-1, 1 / 2, 1 /
                 2], [1, -(1 / 2), 1 / 2], [-(1 / 2), 2, 0], [1 / 2, 0, 0], [1 /
                 2, 1, 1], [-(1 /
                    2), 1, 1], [0, 0, 0], [0, 1, -1], [0, -1, -1], [-1, 0, 0], [0, 0, -1], [0, 1, 0], [0, 1, -1], [-(1 /
                    2), 0, -1], [-(1 / 2), 1, -1], [-(3 / 2), 1, 0], [1 /
                 2, 0, 0], [0, 3 / 2, -(1 / 2)], [1, -(1 / 2), -(1 / 2)], [1, 1 /
                 2, 1 / 2], [0, 1 / 2, 1 / 2], [1 / 2, 1 / 2, 1 / 2], [1 / 2, 3 /
                 2, -(1 / 2)], [1 / 2, -(1 / 2), -(1 / 2)], [-(1 / 2), 1 / 2, -(1 /
                    2)], [3 / 2, 1 / 2, -(1 / 2)], [0, 1, 0], [0, 0, 0], [1 /
                 2, 1, -2], [1 / 2, 1, -1], [1 / 2, 0, -2], [1 / 2, 0, -1], [-(1 /
                    2), 1, -2], [-(1 / 2), 1, -1], [-(1 / 2), 0, -2], [-(1 /
                    2), 0, -1], [1, -(1 / 2), -(3 / 2)], [-1, -(1 / 2), -(3 /
                    2)], [0, -(3 / 2), -(3 / 2)], [0, 1 / 2, -(3 / 2)], [0, -(1 /
                    2), -(1 / 2)], [-(1 / 2), 3 / 2, 3 / 2], [1 / 2, 3 / 2, 3 /
                 2], [1 / 2, 1 / 2, 1 / 2], [-(1 / 2), 5 / 2, 1 /
                 2], [1, -1, 1], [-1, 0, 1], [0, 0, 0], [0, -1, 0], [1 /
                 2, 2, -2], [1 / 2, 2, -1], [1 / 2, 1, -2], [1 / 2, 1, -1], [-(1 /
                    2), 2, -2], [-(1 / 2), 2, -1], [-(1 / 2), 1, -2], [-(1 /
                    2), 1, -1], [0, 1 / 2, -(1 / 2)], [-1, 1 / 2, -(3 /
                    2)], [-1, -(1 / 2), -(3 / 2)], [-(1 / 2), 3 / 2, -(1 /
                    2)], [-(1 / 2), 3 / 2, 1 / 2], [-(1 / 2), 1 / 2, -(1 /
                    2)], [-(1 / 2), 1 / 2, 1 / 2], [-(3 / 2), 3 / 2, -(1 /
                    2)], [-(1 / 2), 1 / 2, 1 / 2], [-(1 / 2), 5 / 2, 1 / 2], [-(1 /
                    2), 3 / 2, 3 / 2], [-1, -(1 / 2), -(1 / 2)], [0, -(1 / 2), -(1 /
                    2)], [0, -(3 / 2), -(3 / 2)], [-1, 1 / 2, -(3 / 2)], [3 /
                 2, 1, -1], [-(1 / 2), 2, -1], [1 / 2, 2, -2], [1 /
                 2, 1, -2], [1, 0, 0], [-(1 / 2), 3 / 2, 1 / 2], [1 / 2, -(1 /
                    2), 1 / 2], [1 / 2, 1 / 2, 3 / 2], [-1, 1 / 2, -(1 /
                    2)], [0, 1 / 2, -(1 / 2)], [0, -(1 / 2), -(3 / 2)], [-1, 3 /
                 2, -(1 / 2)], [-1, 1 / 2, -(3 / 2)], [-1, 1 / 2, -(1 / 2)], [1 /
                 2, 2, -1], [-(3 / 2), 2, -1], [-(1 / 2), 1, -1], [-(1 /
                    2), 3, -1], [-(1 /
                    2), 2, 0], [-1, -1, 1], [0, -1, 0], [0, -1, -1], [0, 0, 0], [-1, 0, 0], [-(1 /
                    2), 1, 1], [-(1 / 2), 2, 0], [-(1 / 2), 0, 0], [-(3 /
                    2), 1, 0], [1 / 2, 1, 0], [-1, -(1 / 2), 1 / 2], [-1, -(1 /
                    2), -(1 / 2)], [-1, 1 / 2, 1 / 2], [-1, 1 / 2, -(1 /
                    2)], [0, -(1 / 2), 1 / 2], [0, -(1 / 2), -(1 / 2)], [0, 1 /
                 2, 1 / 2], [0, 1 / 2, -(1 / 2)], [-(1 / 2), 1 / 2, -(3 /
                    2)], [-(1 / 2), 3 / 2, -(3 / 2)], [-(3 / 2), 3 / 2, -(1 /
                    2)], [1 / 2, 1 / 2, -(1 /
                    2)], [0, 1, -1], [1, -1, -1], [1, 0, 0], [0, 0, 0], [1 /
                 2, 1, 1], [1 / 2, 2, 0], [1 / 2, 0, 0], [-(1 / 2), 1, 0], [3 /
                 2, 1, 0], [0, -(3 / 2), -(1 / 2)], [0, -(3 / 2), -(3 /
                    2)], [0, -(1 / 2), -(1 / 2)], [0, -(1 / 2), -(3 / 2)], [1, -(3 /
                    2), -(1 / 2)], [1, -(3 / 2), -(3 / 2)], [1, -(1 / 2), -(1 /
                    2)], [1, -(1 / 2), -(3 / 2)], [1 / 2, 3 / 2, -(1 / 2)], [1 /
                 2, 5 / 2, -(1 / 2)], [-(1 / 2), 5 / 2, 1 / 2], [3 / 2, 3 / 2, 1 /
                 2], [-1, 0, 0], [-1, -1, 0], [1, -1, 1], [0, 0, 0], [1 / 2, 1 /
                 2, -(1 / 2)], [-(3 / 2), 1 / 2, 1 / 2], [1 / 2, 1, -1], [1 /
                 2, 2, -1], [-(1 / 2), 2, 0], [3 / 2, 1, 0], [-1, 1 / 2, -(1 /
                    2)], [0, -(3 / 2), -(1 / 2)], [0, -(1 / 2), 1 / 2], [-1, -(1 /
                    2), 1 / 2], [-(1 / 2), 3 / 2, 1 / 2], [-(1 / 2), 5 / 2, -(1 /
                    2)], [-(1 / 2), 1 / 2, -(1 / 2)], [-(3 / 2), 3 / 2, -(1 /
                    2)], [1 / 2, 3 / 2, -(1 / 2)], [0, -1, 1], [1 / 2, 1 / 2, 1 /
                 2], [-(1 / 2), 3 / 2, -(1 / 2)], [-(3 / 2), 3 / 2, -(1 /
                    2)], [2, 0, 0], [0, 1, 0], [1, 1, -1], [1, 0, -1], [3 /
                 2, 1, -1], [3 / 2, 1, 0], [-(1 / 2), 1, -1], [1 / 2, 1, -2], [1 /
                 2, 0, -2], [1, 1, 0], [1, 1, 1], [1, 0, 0], [1, 0, 1], [0, 1, 0], [0, 1, 1], [0, 0, -1], [0, 1, 0], [0, 1, -1], [1, 0, 0], [1, 0, -1], [1, 1, 0], [1, 1, -1], [1 /
                 2, 0, -1], [1 / 2, 1, -1], [-(1 / 2), 1, 0], [1 / 2, 1, -1], [1 /
                 2, 1, 0], [1 / 2, 0, -1], [1 / 2, 0, 0], [2, -(1 / 2), -(1 /
                    2)], [0, -(1 / 2), -(1 / 2)], [1, -(3 / 2), -(1 / 2)], [1, 1 /
                 2, -(1 / 2)], [1, -(3 / 2), -(1 / 2)], [0, 1 / 2, -(1 / 2)], [1 /
                 2, 1, 0], [-(3 / 2), 2, 0], [-(1 / 2), 2, -1], [-(1 /
                    2), 1, -1], [0, 0, -1], [-(1 / 2), 1, -2], [-(1 /
                    2), 2, -2], [-(3 / 2), 2, -1], [1 / 2, 1, -1], [0, 1 / 2, -(3 /
                    2)], [1, -(3 / 2), -(3 / 2)], [1, -(1 / 2), -(1 / 2)], [0, -(1 /
                    2), -(1 / 2)], [1 / 2, 3 / 2, 3 / 2], [1 / 2, 5 / 2, 1 /
                 2], [1 / 2, 1 / 2, 1 / 2], [-(1 / 2), 3 / 2, 1 / 2], [-(3 /
                    2), 1, 0], [-(3 / 2), 1, -1], [-(3 / 2), 2, 0], [-(3 /
                    2), 2, -1], [-(1 / 2), 1, 0], [-(1 / 2), 1, -1], [-(1 /
                    2), 2, 0], [-(1 /
                    2), 2, -1], [-1, -1, -1], [-1, 0, -1], [0, -1, 1], [-(1 /
                    2), 2, 0], [1 / 2, 2, 0], [1 / 2, 1, -1], [-(1 /
                    2), 3, -1], [1, -(3 / 2), -(1 / 2)], [0, -(1 / 2), -(1 /
                    2)], [0, -(1 / 2), -(1 / 2)], [1 / 2, 3 / 2, 1 / 2], [1 / 2, 5 /
                 2, -(1 / 2)], [1 / 2, 1 / 2, -(1 / 2)], [-(1 / 2), 3 / 2, -(1 /
                    2)], [3 / 2, 3 / 2, -(1 /
                    2)], [-1, -1, 1], [-1, 1, 0], [-1, 0, 1], [-(3 /
                    2), 1, 0], [-(1 / 2), 1, 0], [-(1 / 2), 0, -1], [-(3 /
                    2), 2, -1], [2, -(1 / 2), -(1 / 2)], [0, 1 / 2, -(1 /
                    2)], [-1, 1 / 2, -(3 / 2)], [0, -(3 / 2), -(3 / 2)], [1 / 2, 5 /
                 2, -(1 / 2)], [1 / 2, 5 / 2, 1 / 2], [1 / 2, 3 / 2, -(1 / 2)], [1 /
                 2, 3 / 2, 1 / 2], [-(1 / 2), 5 / 2, -(1 / 2)], [-(1 / 2), 5 /
                 2, 1 / 2], [-(1 / 2), 3 / 2, -(1 / 2)], [-(1 / 2), -(1 / 2), -(1 /
                    2)], [-(1 / 2), 1 / 2, 1 / 2], [-(1 / 2), 1 / 2, -(1 / 2)], [1 /
                 2, -(1 / 2), 1 / 2], [1 / 2, -(1 / 2), -(1 / 2)], [1 / 2, 1 /
                 2, 1 / 2], [1 / 2, 1 / 2, -(1 / 2)], [0, 1 / 2, -(3 / 2)], [0, 3 /
                 2, -(3 / 2)], [-1, 3 / 2, -(1 / 2)], [1, 1 / 2, -(1 / 2)], [-(1 /
                    2), 1, -1], [1 / 2, -1, -1], [1 / 2, 0, 0], [-(1 /
                    2), 0, 0], [0, 1, 1], [0, 2, 0], [0, 0, 0], [-1, 1, 0], [1, 1, 0]]).sum =
        0 :=
begin
  iterate 73 {
    rw find_start,
    try {simp only [find_cancel, list.nil_append, list.cons_append, list.singleton_append]},
    repeat {
      rw find_continue,
      try {rw find_cancel}
    },
    try {simp only [list.nil_append, list.cons_append, list.singleton_append]}
  },
  exact counter_example_inv_val_help2
end

end counter_example_help

lemma counter_example_val_inv : 
(p + q * a + r * b + s * (a * b)) * (p' + q' * a + r' * b + s' * (a * b)) = 1 :=
begin
  rw eq_iff_neg_add_eq_zero,
  rw neg_one_def,
  unfold p q r s p' q' r' s',
  unfold x y z x' y' z',
  unfold a b a' b',
  dsimp,
  simp only [mul_add, add_mul, unit.unit_apply, finsupp.add_apply, 
    monoid_algebra.of_apply, monoid_algebra.single_mul_single,
    neg_finsupp_eq_finsupp],

  simp only [one_mul, mul_one],

  simp only [mul_add, add_mul, finsupp.add_apply, 
    monoid_algebra.of_apply, monoid_algebra.single_mul_single],

  simp only [one_mul, mul_one],

  unfold HW_group.x HW_group.y HW_group.z,

  simp only [sq, HW_group.a_inv_def, HW_group.b_inv_def, mul_inv_rev],

  unfold HW_group.a HW_group.b,
  unfold HW_matrix.a HW_matrix.b,

  simp only [
    submonoid.mk_mul_mk,
    GL_mul_apply'
  ],
    
  simp only [matrix.mul_eq_mul],
  simp only [matrix_mul_apply],

  simp only [one_mul, mul_one, mul_neg, neg_neg, add_zero, zero_add, zero_mul],
  norm_num [monoid_algebra.one_def, HW_group.one_def, HW_group.HW_one_def],
  --make a list
  norm_num [HW_group.HW_apply, GL_simp, HW_simp30, HW_simp31, HW_simp32, units.coe_mk, 
    matrix.general_linear_group.coe_fn_eq_coe, pre_f,

    finsupp_sum_start, finsupp_sum_cons, finsupp_sum_cons', sum_merge,

    -list.sum_cons, -list.map],
  iterate 25 {
    rw find_start,
    try {simp only [find_cancel, list.nil_append, list.cons_append, list.singleton_append]},
    repeat {
      rw find_continue,
      try {rw find_cancel}},
    try {simp only [list.nil_append, list.cons_append, list.singleton_append]}},
  exact counter_example_help.counter_example_val_inv_help
end  

lemma counter_example_inv_val : 
(p' + q' * a + r' * b + s' * (a * b)) * (p + q * a + r * b + s * (a * b)) = 1 :=
begin
  rw eq_iff_neg_add_eq_zero,
  rw neg_one_def,
  unfold p q r s p' q' r' s',
  unfold x y z x' y' z',
  unfold a b a' b',
  dsimp,
  simp only [mul_add, add_mul, unit.unit_apply, finsupp.add_apply, 
    monoid_algebra.of_apply, monoid_algebra.single_mul_single,
    neg_finsupp_eq_finsupp],

  simp only [one_mul, mul_one],

  simp only [mul_add, add_mul, finsupp.add_apply, 
    monoid_algebra.of_apply, monoid_algebra.single_mul_single],

  simp only [one_mul, mul_one],

  unfold HW_group.x HW_group.y HW_group.z,

  simp only [sq, HW_group.a_inv_def, HW_group.b_inv_def, mul_inv_rev],

  unfold HW_group.a HW_group.b,
  unfold HW_matrix.a HW_matrix.b,

  simp only [
    submonoid.mk_mul_mk,
    GL_mul_apply'
  ],
    
  simp only [matrix.mul_eq_mul],
  simp only [matrix_mul_apply],

  simp only [one_mul, mul_one, mul_neg, neg_neg, add_zero, zero_add, zero_mul],
  norm_num [monoid_algebra.one_def, HW_group.one_def, HW_group.HW_one_def],
  --make a list
  norm_num [HW_group.HW_apply, GL_simp, HW_simp30, HW_simp31, HW_simp32, units.coe_mk, 
    matrix.general_linear_group.coe_fn_eq_coe, pre_f,

    finsupp_sum_start, finsupp_sum_cons, finsupp_sum_cons', sum_merge,

    -list.sum_cons, -list.map],
  iterate 51 {
    rw find_start,
    try {simp only [find_cancel, list.nil_append, list.cons_append, list.singleton_append]},
    repeat {
      rw find_continue,
      try {rw find_cancel}},
    try {simp only [list.nil_append, list.cons_append, list.singleton_append]}},
  exact counter_example_help.counter_example_inv_val_help
end

def counter_example : units F₂P :=
{ val := p + q * a + r * b + s * (a * b),
  inv := p' + q' * a + r' * b + s' * (a * b),
  val_inv := counter_example_val_inv,
  inv_val := counter_example_inv_val }

lemma counter_example_1_neq_0 : counter_example 1 ≠ 0 :=
begin
  unfold counter_example,
  unfold p q r s p' q' r' s',
  unfold x y z x' y' z',
  unfold a b,
  dsimp,
  simp only [mul_add, add_mul, unit.unit_apply, one_mul, mul_one, finsupp.add_apply, 
    add_zero, zero_add, monoid_algebra.of_apply, monoid_algebra.single_mul_single],
  unfold HW_group.x HW_group.y HW_group.z HW_group.a HW_group.b,
  unfold HW_matrix.a HW_matrix.b,
  simp only [finsupp.single_eq_of_ne,
    ne.def, subtype.ext_iff, subgroup.coe_pow, subgroup.coe_inv, subgroup.coe_mul, 
    subgroup.coe_one, subtype.coe_mk, units.ext_iff, sq, matrix_mul_apply, matrix.mul_eq_mul,
    matrix.general_linear_group.coe_mul, units.coe_mk,units.inv_mk, units.inv_eq_coe_inv,
    mul_inv_rev, ← HW_matrix_ext_iff, HW_group.one_def,
    neg_one_ne_one, one_ne_neg_one, one_ne_zero, mul_neg, mul_one, neg_neg, neg_add_rev, 
    neg_zero, neg_eq_zero, false_and, and_false, not_false_iff, zero_add, zero_mul, add_zero, 
    one_div, add_right_neg, add_left_neg, inv_eq_zero, bit0_eq_zero, or_self, div_eq_zero_iff, 
    half_add_half, add_halves', add_left_eq_self, add_self_eq_zero],
  rw monoid_algebra.one_def,
  rw finsupp.single_eq_same,
  simp only [monoid_algebra.one_def, finsupp.single_eq_same, fin.coe_one, fin.coe_zero, 
    nat.one_ne_zero, not_false_iff],
end

lemma counter_example_ab_neq_0 : counter_example (HW_group.a * HW_group.b) ≠ 0 :=
begin
  unfold counter_example,
  unfold p q r s p' q' r' s',
  unfold x y z x' y' z',
  unfold a b,
  dsimp,
  simp only [mul_add, add_mul, unit.unit_apply, one_mul, mul_one, finsupp.add_apply, 
    add_zero, zero_add, monoid_algebra.of_apply, monoid_algebra.single_mul_single],
  unfold HW_group.x HW_group.y HW_group.z HW_group.a HW_group.b,
  unfold HW_matrix.a HW_matrix.b,
  simp only [finsupp.single_eq_of_ne,
    ne.def, subtype.ext_iff, subgroup.coe_pow, subgroup.coe_inv, subgroup.coe_mul, 
    subgroup.coe_one, subtype.coe_mk, units.ext_iff, sq, matrix_mul_apply, matrix.mul_eq_mul,
    matrix.general_linear_group.coe_mul, units.coe_mk,units.inv_mk, units.inv_eq_coe_inv,
    mul_inv_rev, ← HW_matrix_ext_iff, HW_group.one_def,
    neg_one_ne_one, one_ne_neg_one, one_ne_zero, mul_neg, mul_one, neg_neg, neg_add_rev, 
    neg_zero, neg_eq_zero, false_and, and_false, not_false_iff, zero_add, zero_mul, add_zero, 
    one_div, add_right_neg, add_left_neg, inv_eq_zero, bit0_eq_zero, or_self, div_eq_zero_iff, 
    half_add_half, add_halves', add_left_eq_self, add_self_eq_zero],
  simp only [monoid_algebra.one_def, fin.coe_zero],
  simp only [finsupp.single_eq_of_ne, finsupp.single_eq_same,
    ne.def, subtype.ext_iff, subgroup.coe_pow, subgroup.coe_inv, subgroup.coe_mul, 
    subgroup.coe_one, subtype.coe_mk, units.ext_iff, sq, matrix_mul_apply, matrix.mul_eq_mul,
    matrix.general_linear_group.coe_mul, units.coe_mk,units.inv_mk, units.inv_eq_coe_inv,
    mul_inv_rev, ← HW_matrix_ext_iff, HW_group.one_def,
    neg_one_ne_one, one_ne_neg_one, one_ne_zero, mul_neg, mul_one, neg_neg, neg_add_rev, 
    neg_zero, neg_eq_zero, false_and, and_false, not_false_iff, zero_add, zero_mul, add_zero, 
    one_div, add_right_neg, add_left_neg, inv_eq_zero, bit0_eq_zero, or_self, div_eq_zero_iff, 
    half_add_half, add_halves', add_left_eq_self, add_self_eq_zero],
  simp only [fin.coe_one, nat.one_ne_zero, not_false_iff],
end

lemma ab_neq_1 : (HW_group.a * HW_group.b) ≠ 1 := HW_group.ab_neq_one

theorem counter_example_non_trivial : 
counter_example ∉ (units.map (unit.monomial_hom F₂ P)).range :=
begin
  intro h,
  simp only [monoid_hom.mem_range] at h,
  cases h with u hu,
  have : ∃ (g : P), g ≠ u.1.2 ∧ counter_example g ≠ 0,
  { by_cases j : u.1.2 = 1 ,
    { use (HW_group.a * HW_group.b),
      rw j,
      use ab_neq_1,
      exact counter_example_ab_neq_0 },
    { use 1,
      use ne.symm j,
      exact counter_example_1_neq_0 }},
  cases this with g hg,
  rw ← hu at hg,
  cases hg with hg1 hg2,
  contrapose hg2,
  unfold unit.monomial_hom units.map,
  simpa using finsupp.single_eq_of_ne hg1.symm,
end

theorem Theorem1 : (units.map (unit.monomial_hom F₂ P)).range ≠ ⊤ :=
begin
  rw [ne, subgroup.eq_top_iff', not_forall],
  use [counter_example, counter_example_non_trivial]
end

end Theorem1